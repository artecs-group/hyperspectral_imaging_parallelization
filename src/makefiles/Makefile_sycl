DEVICE = cpu # cpu, igpu, nvidia
DEBUG = no # yes, no

# Default compiler and flags
CC = dpcpp
CFLAGS = -I"${MKLROOT}/include" -qmkl -DMKL_ILP64
CLINK = -fsycl-device-code-split=per_kernel ${MKLROOT}/lib/intel64/libmkl_sycl.a -Wl,-export-dynamic -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_tbb_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -L${TBBROOT}/lib/intel64/gcc4.8 -ltbb -lsycl -lOpenCL -lpthread -lm -ldl

ifeq ($(DEVICE),nvidia)
	CC = clang++
    CFLAGS = -DGPU -DNVIDIA_GPU -w -fsycl -fsycl-targets=nvptx64-nvidia-cuda -I${ONEMKL}/include
    CLINK = -fsycl-device-code-split=per_kernel -lonemkl -L${ONEMKL}/lib
else ifeq ($(DEVICE),igpu)
	CFLAGS += -DGPU -DINTEL_GPU
else
    CFLAGS += -DCPU
endif

CFLAGS += -DSYCL

# Debug Flags
ifeq ($(DEBUG),yes)
 CFLAGS += -g -O0
else
 CFLAGS += -O3
endif

main_sycl: ./VCA/sycl/vca.o ./VD/sycl/vd.o main.o
	$(CC) $(CFLAGS) $(CLINK) main.o ./VD/sycl/vd.o ./VCA/sycl/vca.o -o main_sycl

main.o: ./VCA/sycl/vca.o ./VD/sycl/vd.o
	$(CC) $(CFLAGS) main.cpp -c -o main.o

./VD/sycl/vd.o:
	$(CC) $(CFLAGS) ./VD/sycl/vd.cpp -c -o ./VD/sycl/vd.o

./VCA/sycl/vca.o:
	$(CC) $(CFLAGS) ./VCA/sycl/vca.cpp -c -o ./VCA/sycl/vca.o

run: main_sycl
	./main_sycl ../data/Cuprite 5 0

.PHONY: clean
clean:
	rm -f main_sycl \
	*.o \
	./VD/sycl/*.o \
	./VCA/sycl/*.o